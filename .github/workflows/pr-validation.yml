name: PR Validation

on:
  pull_request:
    branches: [ main]

jobs:
  validate:
    name: Validate PR
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    runs-on: ubuntu-24.04
    outputs:
      is_module: ${{ steps.detect-module.outputs.is_module }}
      module_path: ${{ steps.detect-module.outputs.module_path }}
      module_type: ${{ steps.detect-module.outputs.module_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git checkout -b pr-validation origin/${{ github.base_ref }}
          git merge --no-commit --no-ff ${{ github.event.pull_request.head.sha }}

      - name: Install system dependencies for Python build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev \
            libbz2-dev libreadline-dev libsqlite3-dev curl \
            libncursesw5-dev xz-utils tk-dev libxml2-dev \
            libxmlsec1-dev libffi-dev liblzma-dev bc

      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim
          
      - name: Install GO Dependencies
        run: make go-install

      - name: Run OPA Policy Validation
        run: |
          echo "Running OPA policy syntax validation..."
          opa version
          if opa eval --data policies/opa/global --format pretty "data.global" >/dev/null 2>&1; then
            echo "✅ OPA policies are syntactically valid"
          else
            echo "❌ OPA policy validation failed"
            exit 1
          fi

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Changed files: $CHANGED_FILES"
          
          # Update the config file with actual changed files
          jq --argjson files "$CHANGED_FILES" '.test_changed_files = $files' monorepo-config.json > monorepo-config.json.tmp
          mv monorepo-config.json.tmp monorepo-config.json
        
      - name: Detect proposed git repo changes
        id: detect-module
        run: |
          # Run the module detection script and capture output
          set +e  # Allow script to exit non-zero
          OUTPUT=$(make detect-module-changes 2>&1)
          EXIT_CODE=$?
          set -e
          
          # Display the script output (it already contains all necessary messages)
          echo "$OUTPUT"
          
          # Extract variables for GitHub Actions (only if script succeeded)
          if [ $EXIT_CODE -eq 0 ]; then
            IS_MODULE=$(echo "$OUTPUT" | grep "^IS_MODULE=" | cut -d'=' -f2)
            MODULE_PATH=$(echo "$OUTPUT" | grep "^MODULE_PATH=" | cut -d'=' -f2)
            MODULE_TYPE=$(echo "$OUTPUT" | grep "^MODULE_TYPE=" | cut -d'=' -f2)
            
            # Set defaults and outputs
            IS_MODULE=${IS_MODULE:-false}
            echo "is_module=$IS_MODULE" >> $GITHUB_OUTPUT
            
            if [ "$IS_MODULE" = "true" ]; then
              echo "module_path=$MODULE_PATH" >> $GITHUB_OUTPUT
              echo "module_type=$MODULE_TYPE" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Exit with the script's exit code
          exit $EXIT_CODE

  terraform-module-validation:
    name: Terraform Module Validation
    if: needs.validate.result == 'success' && needs.validate.outputs.is_module == 'true'
    needs: validate
    permissions:
      actions: read
      security-events: write
      contents: read
    uses: ./.github/workflows/terraform-module-validation.yml
    with:
      module_path: ${{ needs.validate.outputs.module_path }}
      module_type: ${{ needs.validate.outputs.module_type }}

  non-terraform-validation:
    name: Non-Terraform Validation
    if: needs.validate.result == 'success' && needs.validate.outputs.is_module != 'true'
    needs: validate
    permissions:
      actions: read
      security-events: write
      contents: read
    uses: ./.github/workflows/non-terraform-validation.yml
