name: PR Validation

on:
  pull_request:
    branches: [ main]

jobs:
  # Security check: Block external contributors from modifying workflows
  security-check:
    name: Security Check
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: read
      id-token: write
      actions: write
    steps:
      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a  # v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check contributor type and workflow modifications
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            // Get PR information
            const username = context.payload.pull_request.user.login;
            
            // Check organization membership
            let isInternal = false;
            try {
              const { data: membership } = await github.rest.orgs.getMembershipForUser({
                org: 'caylent-solutions',
                username: username
              });
              isInternal = membership && membership.state === 'active';
            } catch (error) {
              console.log('‚ùå Unable to determine organization membership');
              isInternal = false; // Default to external for security
            }
            
            const contributorType = isInternal ? 'Internal' : 'External';
            const emoji = isInternal ? 'üè¢' : 'üåç';
            
            console.log(`${emoji} Contributor: ${username} (${contributorType})`);
            
            // Get list of changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Check for workflow file modifications
            const workflowChanges = files.filter(file => 
              file.filename.startsWith('.github/workflows/')
            );
            
            if (workflowChanges.length > 0) {
              console.log('üîç Workflow files modified:');
              workflowChanges.forEach(file => {
                console.log(`  - ${file.filename} (${file.status})`);
              });
              
              if (!isInternal) {
                console.log('\nüö® SECURITY ALERT: External contributor attempting to modify workflows!');
                console.log('\n‚ùå BLOCKING: External contributors cannot modify workflow files for security reasons.');
                console.log('\nIf workflow changes are needed:');
                console.log('  1. Remove workflow modifications from your PR');
                console.log('  2. Contact a maintainer to make workflow changes');
                console.log('  3. Submit your code changes in a separate PR');
                
                core.setFailed('External contributors cannot modify workflow files');
              } else {
                console.log('\n‚úÖ Internal contributor - workflow modifications allowed');
              }
            } else {
              console.log('‚úÖ No workflow modifications detected');
            }

  validate:
    name: Validate PR
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    runs-on: ubuntu-24.04
    outputs:
      is_module: ${{ steps.detect-module.outputs.is_module }}
      module_path: ${{ steps.detect-module.outputs.module_path }}
      module_type: ${{ steps.detect-module.outputs.module_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          git checkout -b pr-validation origin/${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bc

      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools (excluding Python)
        run: |
          cd $GITHUB_WORKSPACE
          # Install only the tools needed for PR validation: golang, jq, opa
          for tool in golang jq opa; do
            if grep -q "^$tool " .tool-versions; then
              asdf plugin add $tool || true
              VERSION=$(grep "^$tool " .tool-versions | awk '{print $2}')
              asdf install $tool $VERSION
            fi
          done
          asdf reshim
          
      - name: Install GO Dependencies
        run: make go-install

      - name: Run OPA Policy Validation
        run: |
          echo "Running OPA policy syntax validation..."
          opa version
          if opa eval --data policies/opa/global --format pretty "data.global" >/dev/null 2>&1; then
            echo "‚úÖ OPA policies are syntactically valid"
          else
            echo "‚ùå OPA policy validation failed"
            exit 1
          fi

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files (compare base to head branch directly)
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...origin/${{ github.head_ref }} | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Changed files: $CHANGED_FILES"
          
          # Fail if no changed files detected
          if [ "$CHANGED_FILES" = "[]" ]; then
            echo "‚ùå ERROR: No changed files detected in git diff"
            echo "This indicates a problem with the git diff command or branch references"
            exit 1
          fi
          
          # Update the config file with actual changed files
          jq --argjson files "$CHANGED_FILES" '.test_changed_files = $files' monorepo-config.json > monorepo-config.json.tmp
          mv monorepo-config.json.tmp monorepo-config.json
        
      - name: Detect proposed git repo changes
        id: detect-module
        run: |
          # Run the module detection script and capture output
          set +e  # Allow script to exit non-zero
          OUTPUT=$(make detect-module-changes 2>&1)
          EXIT_CODE=$?
          set -e
          
          # Display the script output (it already contains all necessary messages)
          echo "$OUTPUT"
          
          # Extract variables for GitHub Actions (only if script succeeded)
          if [ $EXIT_CODE -eq 0 ]; then
            IS_MODULE=$(echo "$OUTPUT" | grep "^IS_MODULE=" | cut -d'=' -f2)
            MODULE_PATH=$(echo "$OUTPUT" | grep "^MODULE_PATH=" | cut -d'=' -f2)
            MODULE_TYPE=$(echo "$OUTPUT" | grep "^MODULE_TYPE=" | cut -d'=' -f2)
            
            # Set defaults and outputs
            IS_MODULE=${IS_MODULE:-false}
            echo "is_module=$IS_MODULE" >> $GITHUB_OUTPUT
            
            if [ "$IS_MODULE" = "true" ]; then
              echo "module_path=$MODULE_PATH" >> $GITHUB_OUTPUT
              echo "module_type=$MODULE_TYPE" >> $GITHUB_OUTPUT
              echo ""
              echo "‚úÖ Detected Changes approved for further verification"
              echo "   Module: $MODULE_PATH (Type: $MODULE_TYPE)"
            else
              echo ""
              echo "‚úÖ Detected Changes approved for further verification"
              echo "   Type: Non-Terraform changes"
            fi
          else
            echo ""
            echo "‚ùå Change detection failed: $(echo "$OUTPUT" | tail -n 1)"
            echo "   Please review the error above and fix the issues"
          fi
          
          # Exit with the script's exit code
          exit $EXIT_CODE

  # Non-Terraform validation path
  non-terraform-contributor-analysis:
    name: Non-Terraform Validation / Contributor Analysis & Workflow Routing
    needs: validate
    if: needs.validate.result == 'success' && needs.validate.outputs.is_module != 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    outputs:
      code_owners: ${{ steps.codeowners.outputs.owners }}
      contributor_type: ${{ steps.check-contributor.outputs.type }}
      contributor_username: ${{ steps.check-contributor.outputs.username }}
      internal: ${{ steps.check-contributor.outputs.internal }}
      can_self_approve: ${{ steps.check-contributor.outputs.can-self-approve }}
    steps:
      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a  # v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze contributor type (Internal vs External)
        id: check-contributor
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            try {
              const username = context.payload.pull_request.user.login;
              
              const selfApprovalUsersVar = '${{ vars.SELF_APPROVAL_USERS }}';
              const selfApprovalUsers = selfApprovalUsersVar ? selfApprovalUsersVar.split(',').map(u => u.trim()) : [];
              const canSelfApprove = selfApprovalUsers.includes(username);
              
              const { data: membership } = await github.rest.orgs.getMembershipForUser({
                org: 'caylent-solutions',
                username: username
              });
              
              const isInternal = membership && membership.state === 'active';
              const contributorType = isInternal ? 'Internal' : 'External';
              
              const emoji = isInternal ? 'üè¢' : 'üåç';
              const approvalEmoji = canSelfApprove ? 'üîì' : 'üîí';
              const color = isInternal ? '\u001b[32m' : '\u001b[34m';
              const reset = '\u001b[0m';
              
              console.log(`${color}${emoji} Contributor Detection Results:${reset}`);
              console.log(`${color}  üë§ Username: ${username}${reset}`);
              console.log(`${color}  üè∑Ô∏è  Type: ${contributorType}${reset}`);
              console.log(`${color}  üîí Internal: ${isInternal}${reset}`);
              console.log(`${color}  ${approvalEmoji} Self-Approve: ${canSelfApprove}${reset}`);
              console.log(`${color}  üìã Self-Approval Users: ${selfApprovalUsers.join(', ') || 'None configured'}${reset}`);
              
              core.setOutput('type', contributorType);
              core.setOutput('username', username);
              core.setOutput('internal', isInternal.toString());
              core.setOutput('can-self-approve', canSelfApprove.toString());
            } catch (error) {
              console.log('‚ùå Error checking contributor:', error);
              core.setFailed('Failed to determine contributor type and membership information - strict validation requires successful organization membership check');
            }

      - name: Identify code owners for changed files
        id: codeowners
        run: |
          set +e
          
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...origin/${{ github.head_ref }})
          echo "Changed files: $CHANGED_FILES"

          SPECIFIC_OWNERS=""
          if [ -f ".github/CODEOWNERS" ]; then
            for FILE in $CHANGED_FILES; do
              FILE_EXT="${FILE##*.}"
              if [ "$FILE_EXT" != "$FILE" ]; then
                PATTERN_MATCH=$(grep -E "^\*\.$FILE_EXT" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$PATTERN_MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $PATTERN_MATCH"
                  continue
                fi
              fi
              
              TEMP_FILE="$FILE"
              while [[ "$TEMP_FILE" == */* ]]; do
                DIR=$(dirname "$TEMP_FILE")
                DIR_MATCH=$(grep -E "^$DIR/" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$DIR_MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $DIR_MATCH"
                  break
                fi
                PATTERN_MATCH=$(grep -E "^/$DIR/" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$PATTERN_MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $PATTERN_MATCH"
                  break
                fi
                TEMP_FILE="$DIR"
              done
            done
          fi

          UNIQUE_OWNERS=$(echo "$SPECIFIC_OWNERS" | tr ' ' '\n' | grep -v '^$' | sort -u | tr '\n' ' ' | xargs)
          if [ -z "$UNIQUE_OWNERS" ]; then
            echo "‚ùå ERROR: No specific code owners found for the changed files"
            echo "Changed files must match specific patterns in CODEOWNERS, not just the default '*' pattern"
            echo "Please ensure CODEOWNERS file has explicit patterns covering all changed files"
            exit 1
          fi
          echo "Final owners: $UNIQUE_OWNERS"
          echo "owners=$UNIQUE_OWNERS" >> $GITHUB_OUTPUT

  run-non-terraform-tests-internal:
    name: Run Non-Terraform Tests (Internal)
    needs: [non-terraform-contributor-analysis]
    if: ${{ needs.non-terraform-contributor-analysis.outputs.internal == 'true' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          git checkout -b internal-tests origin/${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bc

      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools (excluding Python)
        run: |
          cd $GITHUB_WORKSPACE
          # Install only the tools needed for non-terraform tests: golang, opa
          for tool in golang opa; do
            if grep -q "^$tool " .tool-versions; then
              asdf plugin add $tool || true
              VERSION=$(grep "^$tool " .tool-versions | awk '{print $2}')
              asdf install $tool $VERSION
            fi
          done
          asdf reshim
          
      - name: Configure environment
        run: make configure

      - name: Run Go linting
        run: make go-lint

      - name: Run Go formatting
        run: make go-format

      - name: Run Go Unit Tests
        run: make go-unit-test

      - name: Run Go Test Coverage
        run: make go-unit-test-coverage
      
      - name: Run rego linting
        run: make rego-lint

      - name: Run rego formatting
        run: make rego-format

      - name: Run rego Unit Tests
        run: make rego-unit-test

      - name: Run rego Test Coverage
        run: make rego-unit-test-coverage

      - name: Check Rego Test Coverage Threshold
        run: |
          echo "Running Rego coverage check..."
          COVERAGE_JSON=$(make rego-unit-test-coverage-json 2>/dev/null)
          COVERAGE=$(echo "$COVERAGE_JSON" | grep -o '"total": [0-9.]*' | awk '{print $2}')
          THRESHOLD=95
          
          if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
            echo -e "\033[32mPASS: Coverage is $COVERAGE% (threshold: $THRESHOLD%)\033[0m"
            exit 0
          else
            echo -e "\033[31mFAIL: Coverage is $COVERAGE% (threshold: $THRESHOLD%)\033[0m"
            exit 1
          fi
          
      - name: Run Rego Integration Tests
        run: make rego-integration-test

  run-non-terraform-tests-external:
    name: Run Non-Terraform Tests (External)
    needs: [non-terraform-contributor-analysis]
    if: ${{ needs.non-terraform-contributor-analysis.outputs.internal == 'false' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    environment: external-contributor-test-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          git checkout -b external-tests origin/${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bc

      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools (excluding Python)
        run: |
          cd $GITHUB_WORKSPACE
          # Install only the tools needed for non-terraform tests: golang, opa
          for tool in golang opa; do
            if grep -q "^$tool " .tool-versions; then
              asdf plugin add $tool || true
              VERSION=$(grep "^$tool " .tool-versions | awk '{print $2}')
              asdf install $tool $VERSION
            fi
          done
          asdf reshim
          
      - name: Configure environment
        run: make configure

      - name: Run Go linting
        run: make go-lint

      - name: Run Go formatting
        run: make go-format

      - name: Run Go Unit Tests
        run: make go-unit-test

      - name: Run Go Test Coverage
        run: make go-unit-test-coverage
      
      - name: Run rego linting
        run: make rego-lint

      - name: Run rego formatting
        run: make rego-format

      - name: Run rego Unit Tests
        run: make rego-unit-test

      - name: Run rego Test Coverage
        run: make rego-unit-test-coverage

      - name: Check Rego Test Coverage Threshold
        run: |
          echo "Running Rego coverage check..."
          COVERAGE_JSON=$(make rego-unit-test-coverage-json 2>/dev/null)
          COVERAGE=$(echo "$COVERAGE_JSON" | grep -o '"total": [0-9.]*' | awk '{print $2}')
          THRESHOLD=95
          
          if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
            echo -e "\033[32mPASS: Coverage is $COVERAGE% (threshold: $THRESHOLD%)\033[0m"
            exit 0
          else
            echo -e "\033[31mFAIL: Coverage is $COVERAGE% (threshold: $THRESHOLD%)\033[0m"
            exit 1
          fi
          
      - name: Run Rego Integration Tests
        run: make rego-integration-test

  # Terraform validation path
  terraform-contributor-analysis:
    name: Terraform Validation / Contributor Analysis & Workflow Routing
    needs: validate
    if: needs.validate.result == 'success' && needs.validate.outputs.is_module == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    outputs:
      code_owners: ${{ steps.codeowners.outputs.owners }}
      contributor_type: ${{ steps.check-contributor.outputs.type }}
      contributor_username: ${{ steps.check-contributor.outputs.username }}
      internal: ${{ steps.check-contributor.outputs.internal }}
      can_self_approve: ${{ steps.check-contributor.outputs.can-self-approve }}
    steps:
      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a  # v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          git checkout -b module-validation origin/${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }}
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bc

      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools (excluding Python)
        run: |
          cd $GITHUB_WORKSPACE
          # Install all tools needed for Terraform validation
          for tool in golang jq opa terraform terraform-docs tflint tfsec; do
            if grep -q "^$tool " .tool-versions; then
              echo "Installing $tool..."
              asdf plugin add $tool || true
              VERSION=$(grep "^$tool " .tool-versions | awk '{print $2}')
              asdf install $tool $VERSION
            fi
          done
          asdf reshim
          
      - name: Configure environment
        run: make configure

      - name: Run module validation
        run: make module-validate MODULE_PATH=${{ needs.validate.outputs.module_path }} MODULE_TYPE=${{ needs.validate.outputs.module_type }}

      - name: Run Terraform linting
        run: make tf-lint MODULE_PATH=${{ needs.validate.outputs.module_path }}

      - name: Run Terraform formatting check
        run: make tf-format MODULE_PATH=${{ needs.validate.outputs.module_path }}

      - name: Check Terraform documentation is up-to-date
        run: make tf-docs-check MODULE_PATH=${{ needs.validate.outputs.module_path }}

      - name: Run security checks
        run: make tf-security MODULE_PATH=${{ needs.validate.outputs.module_path }}

      - name: Run Terraform plan
        run: make tf-plan MODULE_PATH=${{ needs.validate.outputs.module_path }}

      - name: Install go dependencies for module tests
        run: |
          cd ${{ needs.validate.outputs.module_path }}
          make install

      - name: Run Go linting on module tests
        run: |
          cd ${{ needs.validate.outputs.module_path }}
          make go-lint

      - name: Run Go formatting check on module tests
        run: |
          cd ${{ needs.validate.outputs.module_path }}
          make go-format

      - name: Analyze contributor type (Internal vs External)
        id: check-contributor
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            try {
              const username = context.payload.pull_request.user.login;
              
              const selfApprovalUsersVar = '${{ vars.SELF_APPROVAL_USERS }}';
              const selfApprovalUsers = selfApprovalUsersVar ? selfApprovalUsersVar.split(',').map(u => u.trim()) : [];
              const canSelfApprove = selfApprovalUsers.includes(username);
              
              const { data: membership } = await github.rest.orgs.getMembershipForUser({
                org: 'caylent-solutions',
                username: username
              });
              
              const isInternal = membership && membership.state === 'active';
              const contributorType = isInternal ? 'Internal' : 'External';
              
              const emoji = isInternal ? 'üè¢' : 'üåç';
              const approvalEmoji = canSelfApprove ? 'üîì' : 'üîí';
              const color = isInternal ? '\u001b[32m' : '\u001b[34m';
              const reset = '\u001b[0m';
              
              console.log(`${color}${emoji} Contributor Detection Results:${reset}`);
              console.log(`${color}  üë§ Username: ${username}${reset}`);
              console.log(`${color}  üè∑Ô∏è  Type: ${contributorType}${reset}`);
              console.log(`${color}  üîí Internal: ${isInternal}${reset}`);
              console.log(`${color}  ${approvalEmoji} Self-Approve: ${canSelfApprove}${reset}`);
              console.log(`${color}  üìã Self-Approval Users: ${selfApprovalUsers.join(', ') || 'None configured'}${reset}`);
              
              core.setOutput('type', contributorType);
              core.setOutput('username', username);
              core.setOutput('internal', isInternal.toString());
              core.setOutput('can-self-approve', canSelfApprove.toString());
            } catch (error) {
              console.log('‚ùå Error checking contributor:', error);
              core.setFailed('Failed to determine contributor type and membership information - strict validation requires successful organization membership check');
            }
          
      - name: Identify code owners for changed files
        id: codeowners
        if: always()
        run: |
          set +e
          
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...origin/${{ github.head_ref }})
          echo "Changed files: $CHANGED_FILES"

          SPECIFIC_OWNERS=""
          if [ -f ".github/CODEOWNERS" ]; then
            for FILE in $CHANGED_FILES; do
              FILE_EXT="${FILE##*.}"
              if [ "$FILE_EXT" != "$FILE" ]; then
                PATTERN_MATCH=$(grep -E "^\*\.$FILE_EXT" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$PATTERN_MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $PATTERN_MATCH"
                  continue
                fi
              fi
              
              TEMP_FILE="$FILE"
              while [[ "$TEMP_FILE" == */* ]]; do
                DIR=$(dirname "$TEMP_FILE")
                DIR_MATCH=$(grep -E "^$DIR/" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$DIR_MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $DIR_MATCH"
                  break
                fi
                PATTERN_MATCH=$(grep -E "^/$DIR/" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$PATTERN_MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $PATTERN_MATCH"
                  break
                fi
                TEMP_FILE="$DIR"
              done
            done
          fi

          UNIQUE_OWNERS=$(echo "$SPECIFIC_OWNERS" | tr ' ' '\n' | grep -v '^$' | sort -u | tr '\n' ' ' | xargs)
          if [ -z "$UNIQUE_OWNERS" ]; then
            echo "‚ùå ERROR: No specific code owners found for the changed files"
            echo "Changed files must match specific patterns in CODEOWNERS, not just the default '*' pattern"
            echo "Please ensure CODEOWNERS file has explicit patterns covering all changed files"
            exit 1
          fi
          echo "Final owners: $UNIQUE_OWNERS"
          echo "owners=$UNIQUE_OWNERS" >> $GITHUB_OUTPUT

  run-terraform-tests-internal:
    name: Run Terraform Tests (Internal)
    needs: [validate, terraform-contributor-analysis]
    if: ${{ needs.terraform-contributor-analysis.outputs.internal == 'true' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          git checkout -b caylent-tests origin/${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          # Only install tools needed for Terraform tests
          for tool in golang terraform terraform-docs terragrunt tflint tfsec jq; do
            asdf plugin add $tool || true
          done
          asdf install golang terraform terraform-docs terragrunt tflint tfsec jq
          asdf reshim
          
      - name: Configure environment
        run: make configure

      - name: Run module tests with configuration
        run: |
          echo "Running tests with module-specific configuration"
          make tf-test MODULE_PATH=${{ needs.validate.outputs.module_path }}

  run-terraform-tests-external:
    name: Run Terraform Tests (External)
    needs: [validate, terraform-contributor-analysis]
    if: ${{ needs.terraform-contributor-analysis.outputs.internal == 'false' }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    environment: external-contributor-test-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          git checkout -b external-tests origin/${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
                    
      - name: Install ASDF
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          # Only install tools needed for Terraform tests
          for tool in golang terraform terraform-docs terragrunt tflint tfsec jq; do
            asdf plugin add $tool || true
          done
          asdf install golang terraform terraform-docs terragrunt tflint tfsec jq
          asdf reshim
          asdf reshim
          
      - name: Configure environment
        run: make configure

      - name: Run module tests with configuration
        run: |
          echo "Running tests with module-specific configuration"
          make tf-test MODULE_PATH=${{ needs.validate.outputs.module_path }}

  # Final job that triggers main validation workflow
  pr-validation-complete:
    name: PR Validation Complete
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: read
      actions: write
    needs: [
      validate, 
      non-terraform-contributor-analysis,
      run-non-terraform-tests-internal, 
      run-non-terraform-tests-external,
      terraform-contributor-analysis,
      run-terraform-tests-internal,
      run-terraform-tests-external
    ]
    if: always() && needs.validate.result == 'success' && ((needs.validate.outputs.is_module != 'true' && needs.non-terraform-contributor-analysis.result == 'success' && (needs.run-non-terraform-tests-internal.result == 'success' || needs.run-non-terraform-tests-external.result == 'success')) || (needs.validate.outputs.is_module == 'true' && needs.terraform-contributor-analysis.result == 'success' && (needs.run-terraform-tests-internal.result == 'success' || needs.run-terraform-tests-external.result == 'success')))
    outputs:
      change_type: ${{ steps.determine-outputs.outputs.change_type }}
      contributor_type: ${{ steps.determine-outputs.outputs.contributor_type }}
      contributor_username: ${{ steps.determine-outputs.outputs.contributor_username }}
      can_self_approve: ${{ steps.determine-outputs.outputs.can_self_approve }}
      code_owners: ${{ steps.determine-outputs.outputs.code_owners }}
      module_path: ${{ steps.determine-outputs.outputs.module_path }}
      module_type: ${{ steps.determine-outputs.outputs.module_type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a  # v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Check if main-validation.yml was modified
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: main_validation_changed
        with:
          token: ${{ steps.generate_token.outputs.token }}
          list-files: none
          filters: |
            main_validation:
              - '.github/workflows/main-validation.yml'

      - name: Determine outputs
        id: determine-outputs
        run: |
          if [[ "${{ needs.validate.outputs.is_module }}" == "true" ]]; then
            echo "change_type=terraform" >> $GITHUB_OUTPUT
            echo "contributor_type=${{ needs.terraform-contributor-analysis.outputs.contributor_type }}" >> $GITHUB_OUTPUT
            echo "contributor_username=${{ needs.terraform-contributor-analysis.outputs.contributor_username }}" >> $GITHUB_OUTPUT
            echo "can_self_approve=${{ needs.terraform-contributor-analysis.outputs.can_self_approve }}" >> $GITHUB_OUTPUT
            echo "code_owners=${{ needs.terraform-contributor-analysis.outputs.code_owners }}" >> $GITHUB_OUTPUT
            echo "module_path=${{ needs.validate.outputs.module_path }}" >> $GITHUB_OUTPUT
            echo "module_type=${{ needs.validate.outputs.module_type }}" >> $GITHUB_OUTPUT
            echo "‚úÖ Terraform module validation completed"
          else
            echo "change_type=non-terraform" >> $GITHUB_OUTPUT
            echo "contributor_type=${{ needs.non-terraform-contributor-analysis.outputs.contributor_type }}" >> $GITHUB_OUTPUT
            echo "contributor_username=${{ needs.non-terraform-contributor-analysis.outputs.contributor_username }}" >> $GITHUB_OUTPUT
            echo "can_self_approve=${{ needs.non-terraform-contributor-analysis.outputs.can_self_approve }}" >> $GITHUB_OUTPUT
            echo "code_owners=${{ needs.non-terraform-contributor-analysis.outputs.code_owners }}" >> $GITHUB_OUTPUT
            echo "module_path=" >> $GITHUB_OUTPUT
            echo "module_type=" >> $GITHUB_OUTPUT
            echo "‚úÖ Non-terraform validation completed"
          fi
          
      - name: Trigger main validation workflow
        if: steps.main_validation_changed.outputs.main_validation != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            // Build module configuration JSON for terraform changes
            const changeType = '${{ steps.determine-outputs.outputs.change_type }}';
            const modulePath = '${{ steps.determine-outputs.outputs.module_path }}';
            const moduleType = '${{ steps.determine-outputs.outputs.module_type }}';
            
            let moduleConfig = '{"path":"","type":""}';
            if (changeType === 'terraform' && modulePath && moduleType) {
              moduleConfig = JSON.stringify({
                path: modulePath,
                type: moduleType
              });
            }
            
            console.log(`Triggering main validation with module_config: ${moduleConfig}`);
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main-validation.yml',
              ref: context.payload.pull_request.base.ref,
              inputs: {
                change_type: '${{ steps.determine-outputs.outputs.change_type }}',
                contributor_type: '${{ steps.determine-outputs.outputs.contributor_type }}',
                contributor_username: '${{ steps.determine-outputs.outputs.contributor_username }}',
                can_self_approve: '${{ steps.determine-outputs.outputs.can_self_approve }}',
                code_owners: '${{ steps.determine-outputs.outputs.code_owners }}',
                pr_number: '${{ github.event.pull_request.number }}',
                pr_title: '${{ github.event.pull_request.title }}',
                pr_html_url: '${{ github.event.pull_request.html_url }}',
                module_config: moduleConfig,
                dryrun: 'false'
              }
            });

      - name: Notify about skipped dispatch
        if: steps.main_validation_changed.outputs.main_validation == 'true'
        run: |
          echo "üö´ Skipping dispatch of main-validation.yml because it was modified in this PR."
          echo "‚úÖ To finish validation:"
          echo "1. Merge this PR into \`main\`."
          echo "2. Create a new PR that includes actual code changes."
          echo "3. The PR validation workflow will now be able to trigger \`main-validation.yml\` as expected."
