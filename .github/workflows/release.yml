name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (terraform-module or non-terraform)'
        required: true
        type: string
      module_path:
        description: 'Path to the Terraform module (only for terraform-module releases)'
        required: false
        type: string
      contributor_type:
        description: 'Type of contributor (Internal or External)'
        required: true
        type: string
      contributor_username:
        description: 'Username of the contributor'
        required: true
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read Python version
      id: python-version
      run: |
        PYTHON_VERSION=$(grep '^python ' .tool-versions | awk '{print $2}')
        echo "version=$PYTHON_VERSION" >> $GITHUB_OUTPUT

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Generate GitHub App token
      id: generate_token
      uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
      with:
        app_id: ${{ secrets.GH_APP_ID }}
        private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

    - name: Install python-semantic-release
      run: pip install -r .github/workflows/requirements-release.txt

    - name: Determine release type & run
      id: run-release
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        set -eo pipefail

        TYPE="${{ github.event.inputs.release_type }}"
        CONTRIB="${{ github.event.inputs.contributor_type }}"
        USER="${{ github.event.inputs.contributor_username }}"

        notify_slack() {
          local TAG="$1"
          curl -s -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\":rocket: Published *$TAG* ($TYPE) by $USER ($CONTRIB)\"}" \
            $SLACK_WEBHOOK_URL
        }

        git config user.name "caylent-platform-bot[bot]"
        git config user.email "caylent-platform-bot[bot]@users.noreply.github.com"

        if [[ "$TYPE" == "terraform-module" ]]; then
          MODULE="${{ github.event.inputs.module_path }}"
          PREFIX="${MODULE}/v"
          echo "🔧 TF release for: $MODULE"

          if [[ ! -d "$MODULE" ]]; then
            echo "❌ Module path not found: $MODULE" >&2
            exit 1
          fi

          LATEST_TAG=$(git tag --list "${PREFIX}[0-9]*" --sort=-v:refname | head -1)
          if [[ -n "$LATEST_TAG" && ! "$LATEST_TAG" =~ ^${PREFIX}[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format: $LATEST_TAG" >&2
            exit 1
          fi

          if [[ -z "$LATEST_TAG" ]]; then
            CURRENT="0.0.0"
          else
            CURRENT="${LATEST_TAG#${PREFIX}}"
          fi

          COMMITS=$(git log --oneline "${LATEST_TAG}..HEAD" -- "$MODULE" || echo "")
          if echo "$COMMITS" | grep -q '^feat'; then
            NEXT=$(echo "$CURRENT" | awk -F. '{print $1"."($2+1)".0"}')
          elif echo "$COMMITS" | grep -q '^fix'; then
            NEXT=$(echo "$CURRENT" | awk -F. '{print $1"."$2"."($3+1)}')
          else
            echo "ℹ️ No bump needed."
            exit 0
          fi

          NEW_TAG="${PREFIX}${NEXT}"
          echo "$NEXT" > "${MODULE}/VERSION"
          echo "## $NEW_TAG ($(date +'%Y-%m-%d'))" > "${MODULE}/CHANGELOG.md"
          echo "$COMMITS" | sed 's/^/* /' >> "${MODULE}/CHANGELOG.md"

          git add "${MODULE}/VERSION" "${MODULE}/CHANGELOG.md"
          git commit -m "chore(release): $NEW_TAG"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin HEAD
          git push origin "$NEW_TAG"

          notify_slack "$NEW_TAG"
          echo "✅ Terraform release complete"

        else
          echo "🚀 Non-terraform release with semantic-release"

          # Extract version for future use
          VERSION=$(python -m semantic_release version --print)
          TAG="v$VERSION"

          # Generate changelog
          python -m semantic_release changelog > REPO_CHANGELOG.md
          echo "## $TAG ($(date +'%Y-%m-%d'))" > CHANGELOG.md.new
          echo "" >> CHANGELOG.md.new
          cat REPO_CHANGELOG.md >> CHANGELOG.md.new
          echo "" >> CHANGELOG.md.new
          if [[ -f CHANGELOG.md ]]; then
            cat CHANGELOG.md >> CHANGELOG.md.new
          fi
          mv CHANGELOG.md.new CHANGELOG.md

          echo "$TAG" > VERSION

          git add CHANGELOG.md VERSION
          git commit -m "chore(release): $TAG"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin HEAD
          git push origin "$TAG"

          notify_slack "$TAG"
          echo "✅ Non-terraform release complete"
        fi

    - name: Show exit status
      run: echo "Release job completed with exit code $?"
