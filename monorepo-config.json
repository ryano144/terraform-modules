{
  "module_roots": [
    "generics/utilities/",
    "providers/aws/collections/",
    "providers/aws/primitives/",
    "providers/aws/references/",
    "providers/github/collections/",
    "providers/github/primitives/",
    "providers/github/references/",
    "skeletons/"
  ],
  "module_types": {
    "skeleton": {
      "path_patterns": ["skeletons/*"],
      "policy_dir": "policies/opa/terraform/module_types/skeleton"
    },
    "utility": {
      "path_patterns": ["generics/utilities/*"],
      "policy_dir": "policies/opa/terraform/module_types/utility"
    },
    "primitive": {
      "path_patterns": ["providers/*/primitives/*"],
      "policy_dir": "policies/opa/terraform/module_types/primitive"
    },
    "collection": {
      "path_patterns": ["providers/*/collections/*"],
      "policy_dir": "policies/opa/terraform/module_types/collection"
    },
    "reference": {
      "path_patterns": ["providers/*/references/*"],
      "policy_dir": "policies/opa/terraform/module_types/reference"
    }
  },
  "scripts": {
    "terraform_file_collector": "terraform-file-collector",
    "temp_file_pattern": "terraform-files-*.json",
    "go_unit_test": "./scripts/go-unit-test/main.go",
    "rego_unit_test": "./scripts/rego-unit-test/main.go",
    "excluded_dirs": [".terraform", ".git", "node_modules", ".terragrunt-cache"],
    "important_dirs": ["examples", "tests"],
    "directory_marker": "directory",
    "lint_directories": [
      "scripts/detect-proposed-git-repo-changes",
      "scripts/go-format",
      "scripts/go-lint",
      "scripts/go-unit-test",
      "scripts/install-tools",
      "scripts/main-validation",
      "scripts/module-type-validator",
      "scripts/module-validator",
      "scripts/rego-unit-test",
      "scripts/terraform-file-collector"
    ]
  },
  "rego_tests": [
    "tests/opa/unit/global",
    "tests/opa/unit/terraform/module",
    "tests/opa/unit/terraform/module_types",
    "tests/opa/unit/terraform/provider"
  ],
  "rego_policy_dirs": {
    "tests/opa/unit/global": "policies/opa/global",
    "tests/opa/unit/terraform/module": "policies/opa/terraform/module",
    "tests/opa/unit/terraform/module_types": "policies/opa/terraform/module_types",
    "tests/opa/unit/terraform/provider": "policies/opa/terraform/provider"
  },
  "rego_helpers_dir": "tests/opa/unit/helpers",
  "module_validator_additional_policies": [
    "tests/opa/unit/terraform/module",
    "tests/opa/unit/terraform/provider"
  ],
  "workflow_tests": {
    "test_module": "skeletons/generic-skeleton",
    "test_module_type": "skeleton",
    "repository": "caylent-solutions/terraform-modules",
    "default_inputs": {
      "code_owners": "matt-dresden-caylent",
      "dryrun": "true"
    },
    "variations": [
      {
        "name": "Internal-NonTerraform-SelfApproval",
        "change_type": "non-terraform",
        "contributor_type": "Internal",
        "can_self_approve": "true",
        "description": "Internal contributor making non-terraform changes with self-approval permissions"
      },
      {
        "name": "Internal-NonTerraform-ManualApproval",
        "change_type": "non-terraform",
        "contributor_type": "Internal",
        "can_self_approve": "false",
        "description": "Internal contributor making non-terraform changes requiring manual approval"
      },
      {
        "name": "External-NonTerraform-ManualApproval",
        "change_type": "non-terraform",
        "contributor_type": "External",
        "can_self_approve": "false",
        "description": "External contributor making non-terraform changes (always requires manual approval)"
      },
      {
        "name": "Internal-Terraform-SelfApproval",
        "change_type": "terraform",
        "contributor_type": "Internal",
        "can_self_approve": "true",
        "description": "Internal contributor making terraform changes with self-approval permissions"
      },
      {
        "name": "Internal-Terraform-ManualApproval",
        "change_type": "terraform",
        "contributor_type": "Internal",
        "can_self_approve": "false",
        "description": "Internal contributor making terraform changes requiring manual approval"
      },
      {
        "name": "External-Terraform-ManualApproval",
        "change_type": "terraform",
        "contributor_type": "External",
        "can_self_approve": "false",
        "description": "External contributor making terraform changes (always requires manual approval)"
      }
    ]
  },
  "coverage_groups": [
    {
      "name": "Go Unit Test",
      "emoji": "üß™",
      "outputFile": "go-unit-test.out",
      "testPath": "./scripts/go-unit-test",
      "coverPkg": "./scripts/go-unit-test"
    },
    {
      "name": "Detect Proposed Git Repo Changes",
      "emoji": "üîç",
      "outputFile": "detect-proposed-git-repo-changes.out",
      "testPath": "./scripts/detect-proposed-git-repo-changes",
      "coverPkg": "./scripts/detect-proposed-git-repo-changes"
    },
    {
      "name": "Install Tools",
      "emoji": "üîß",
      "outputFile": "go-unit-test.out",
      "testPath": "./scripts/go-unit-test",
      "coverPkg": "./scripts/go-unit-test"
    },
    {
      "name": "Module Type Validator",
      "emoji": "‚úÖ",
      "outputFile": "module-type-validator.out",
      "testPath": "./scripts/module-type-validator",
      "coverPkg": "./scripts/module-type-validator"
    },
    {
      "name": "Main Validation",
      "emoji": "üîé",
      "outputFile": "main-validation.out",
      "testPath": "./scripts/main-validation",
      "coverPkg": "./scripts/main-validation"
    },
    {
      "name": "Module Validator",
      "emoji": "üîé",
      "outputFile": "module-validator.out",
      "testPath": "./scripts/module-validator",
      "coverPkg": "./scripts/module-validator"
    },
    {
      "name": "Terraform File Collector",
      "emoji": "üìÅ",
      "outputFile": "terraform-file-collector.out",
      "testPath": "./scripts/terraform-file-collector",
      "coverPkg": "./scripts/terraform-file-collector"
    },
    {
      "name": "Lint",
      "emoji": "üßπ",
      "outputFile": "lint.out",
      "testPath": "./scripts/go-lint",
      "coverPkg": "./scripts/go-lint"
    },
    {
      "name": "Rego Unit Test",
      "emoji": "üîç",
      "outputFile": "rego-unit-test.out",
      "testPath": "./scripts/rego-unit-test",
      "coverPkg": "./scripts/rego-unit-test"
    }
  ]
}